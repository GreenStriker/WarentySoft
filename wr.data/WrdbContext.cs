// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace wr.entity
{
    public partial class WrdbContext : DbContext
    {
        public WrdbContext()
        {
        }

        public WrdbContext(DbContextOptions<WrdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Branch> Branch { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<Theme> Theme { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Code).HasMaxLength(500);

                entity.Property(e => e.DeactiveDate)
                    .HasColumnName("Deactive_Date")
                    .HasColumnType("date");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.OpeningDate).HasColumnType("date");
            });

            modelBuilder.Entity<Color>(entity =>
            {
                entity.Property(e => e.ColorId).HasColumnName("ColorID");

                entity.Property(e => e.Forth).HasMaxLength(50);

                entity.Property(e => e.Frist).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Sec).HasMaxLength(50);

                entity.Property(e => e.Third).HasMaxLength(50);
            });

            modelBuilder.Entity<Settings>(entity =>
            {
                entity.Property(e => e.SettingsId).HasColumnName("SettingsID");

                entity.Property(e => e.AdvanceSalaryPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IncentiveRetion).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IsattendenceCount).HasColumnName("ISAttendenceCount");

                entity.Property(e => e.IsrewardPoitCount).HasColumnName("ISRewardPoitCount");

                entity.Property(e => e.OverTimeRatio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RewardPointRethio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Theme>(entity =>
            {
                entity.ToTable("theme");

                entity.Property(e => e.ThemeId).HasColumnName("themeID");

                entity.Property(e => e.ColorId).HasColumnName("colorID");

                entity.Property(e => e.Createdby).HasColumnName("createdby");

                entity.Property(e => e.Createdtime).HasColumnName("createdtime");

                entity.Property(e => e.Uid).HasColumnName("uid");

                entity.HasOne(d => d.Color)
                    .WithMany(p => p.Theme)
                    .HasForeignKey(d => d.ColorId)
                    .HasConstraintName("FK_theme_Color");

                entity.HasOne(d => d.U)
                    .WithMany(p => p.Theme)
                    .HasForeignKey(d => d.Uid)
                    .HasConstraintName("FK_theme_User");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Uid);

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(50);

                entity.Property(e => e.BrachId).HasColumnName("brachId");

                entity.Property(e => e.DeactiveDate)
                    .HasColumnName("Deactive_date")
                    .HasColumnType("date");

                entity.Property(e => e.Designation).HasMaxLength(50);

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.JoingDate)
                    .HasColumnName("Joing_date")
                    .HasColumnType("date");

                entity.Property(e => e.Moble)
                    .HasColumnName("moble")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(50);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.UserName)
                    .HasColumnName("userName")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Brach)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.BrachId)
                    .HasConstraintName("FK_User_Branch");

                entity.HasOne(d => d.UserType)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.UserTypeId)
                    .HasConstraintName("FK_User_UserType");
            });

            modelBuilder.Entity<UserType>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}